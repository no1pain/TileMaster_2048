{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static STATUS = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n        this.score = 0;\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    getState() {\n        return this.state;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    moveLeft() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        let canMove = false;\n        const newState = this.state.map((row)=>{\n            const filteredRow = row.filter((cell)=>cell !== 0);\n            const newRow = [];\n            for(let i = 0; i < filteredRow.length; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                const mergedValue = filteredRow[i] * 2;\n                newRow.push(mergedValue);\n                this.score += mergedValue;\n                i++;\n                canMove = true;\n            } else newRow.push(filteredRow[i]);\n            while(newRow.length < row.length)newRow.push(0);\n            if (!canMove && !row.every((cell, index)=>cell === newRow[index])) canMove = true;\n            return newRow;\n        });\n        if (canMove) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return canMove;\n    }\n    moveRight() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        let canMove = false;\n        const newState = this.state.map((row)=>{\n            const filteredRow = row.filter((cell)=>cell !== 0);\n            const newRow = [];\n            for(let i = filteredRow.length - 1; i >= 0; i--)if (filteredRow[i] === filteredRow[i - 1]) {\n                const mergedValue = filteredRow[i] * 2;\n                newRow.unshift(mergedValue);\n                this.score += mergedValue;\n                i--;\n                canMove = true;\n            } else newRow.unshift(filteredRow[i]);\n            while(newRow.length < row.length)newRow.unshift(0);\n            if (!canMove && !row.every((cell, index)=>cell === newRow[index])) canMove = true;\n            return newRow;\n        });\n        if (canMove) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return canMove;\n    }\n    moveUp() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        let canMove = false;\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < this.state[0].length; c++){\n            const filteredColumn = [];\n            for(let r = 0; r < this.state.length; r++)if (this.state[r][c] !== 0) filteredColumn.push(this.state[r][c]);\n            const newColumn = [];\n            for(let i = 0; i < filteredColumn.length; i++)if (filteredColumn[i] === filteredColumn[i + 1]) {\n                const mergedValue = filteredColumn[i] * 2;\n                newColumn.push(mergedValue);\n                this.score += mergedValue;\n                i++;\n                canMove = true;\n            } else newColumn.push(filteredColumn[i]);\n            while(newColumn.length < this.state.length)newColumn.push(0);\n            for(let r = 0; r < this.state.length; r++)if (newState[r][c] !== newColumn[r]) {\n                newState[r][c] = newColumn[r];\n                canMove = true;\n            }\n        }\n        if (canMove) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return canMove;\n    }\n    moveDown() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        let canMove = false;\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < this.state[0].length; c++){\n            const filteredColumn = [];\n            for(let r = this.state.length - 1; r >= 0; r--)if (this.state[r][c] !== 0) filteredColumn.push(this.state[r][c]);\n            const newColumn = [];\n            for(let i = 0; i < filteredColumn.length; i++)if (filteredColumn[i] === filteredColumn[i + 1]) {\n                const mergedValue = filteredColumn[i] * 2;\n                newColumn.unshift(mergedValue);\n                this.score += mergedValue;\n                i++;\n                canMove = true;\n            } else newColumn.unshift(filteredColumn[i]);\n            while(newColumn.length < this.state.length)newColumn.unshift(0);\n            for(let r = 0; r < this.state.length; r++)if (newState[r][c] !== newColumn[r]) {\n                newState[r][c] = newColumn[r];\n                canMove = true;\n            }\n        }\n        if (canMove) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return canMove;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.playing;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.addCell();\n        this.addCell();\n        this.setState();\n    }\n    restart() {\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.setState();\n    }\n    addCell() {\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push({\n                r: i,\n                c: j\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const randomIndex = this.addRandomNumber(emptyCells.length);\n        const { r: r, c: c } = emptyCells[randomIndex];\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        newState[r][c] = this.getRandomCell();\n        this.state = newState;\n    }\n    setState() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        const stateValues = this.state.flat();\n        if (cells.length === 0) return;\n        for(let i = 0; i < stateValues.length; i++){\n            const currentCell = cells[i];\n            const currentValue = stateValues[i];\n            if (!currentCell) continue;\n            currentCell.className = \"field-cell\";\n            if (currentValue > 0) {\n                currentCell.textContent = currentValue;\n                currentCell.classList.add(`field-cell--${currentValue}`);\n            } else currentCell.textContent = \"\";\n        }\n    }\n    addRandomNumber(max) {\n        return Math.floor(Math.random() * max);\n    }\n    getRandomCell() {\n        return Math.random() < 0.9 ? 2 : 4;\n    }\n    checkStatus() {\n        let canMove = false;\n        let canMerge = false;\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 2048) {\n                this.status = $a5fd07fa01589658$var$Game.STATUS.win;\n                return;\n            }\n        }\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length - 1; j++)if (this.state[i][j] === this.state[i][j + 1]) {\n                canMerge = true;\n                break;\n            }\n            if (canMerge) break;\n        }\n        if (!canMerge) for(let i = 0; i < this.state.length - 1; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === this.state[i + 1][j]) {\n                canMerge = true;\n                break;\n            }\n            if (canMerge) break;\n        }\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) {\n                canMove = true;\n                break;\n            }\n            if (canMove) break;\n        }\n        if (!canMove && !canMerge) this.status = $a5fd07fa01589658$var$Game.STATUS.lose;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelectorAll(\".message-win\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.classList = \"button restart\";\n        $09e991522ca7e64e$var$startButton.innerHTML = \"Restart\";\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$getScore();\n    } else if ($09e991522ca7e64e$var$startButton.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startButton.classList = \"button start\";\n        $09e991522ca7e64e$var$startButton.innerHTML = \"Start\";\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$getScore();\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$getScore();\n    $09e991522ca7e64e$var$updateMessages();\n});\nfunction $09e991522ca7e64e$var$updateMessages() {\n    if ($09e991522ca7e64e$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).STATUS.lose) $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).STATUS.win) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$getScore() {\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n}\n\n\n//# sourceMappingURL=index.e6773965.js.map\n","'use strict';\r\n\r\nimport Game from '../modules/Game.class';\r\n\r\nconst game = new Game();\r\n\r\nconst startButton = document.querySelector('.start');\r\nconst startMessage = document.querySelector('.message-start');\r\nconst loseMessage = document.querySelector('.message-lose');\r\nconst winMessage = document.querySelectorAll('.message-win');\r\nconst gameScore = document.querySelector('.game-score');\r\n\r\nstartButton.addEventListener('click', () => {\r\n  if (startButton.classList.contains('start')) {\r\n    game.start();\r\n    startButton.classList = 'button restart';\r\n    startButton.innerHTML = 'Restart';\r\n    startMessage.classList.add('hidden');\r\n    loseMessage.classList.add('hidden');\r\n    winMessage.classList.add('hidden');\r\n\r\n    getScore();\r\n  } else if (startButton.classList.contains('restart')) {\r\n    game.restart();\r\n    startButton.classList = 'button start';\r\n    startButton.innerHTML = 'Start';\r\n    startMessage.classList.remove('hidden');\r\n    loseMessage.classList.add('hidden');\r\n    winMessage.classList.add('hidden');\r\n\r\n    getScore();\r\n  }\r\n});\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n  switch (e.key) {\r\n    case 'ArrowLeft':\r\n      game.moveLeft();\r\n      break;\r\n    case 'ArrowRight':\r\n      game.moveRight();\r\n      break;\r\n    case 'ArrowUp':\r\n      game.moveUp();\r\n      break;\r\n    case 'ArrowDown':\r\n      game.moveDown();\r\n      break;\r\n  }\r\n\r\n  getScore();\r\n  updateMessages();\r\n});\r\n\r\nfunction updateMessages() {\r\n  if (game.getStatus() === Game.STATUS.lose) {\r\n    loseMessage.classList.remove('hidden');\r\n  } else if (game.getStatus() === Game.STATUS.win) {\r\n    winMessage.classList.remove('hidden');\r\n  }\r\n}\r\n\r\nfunction getScore() {\r\n  gameScore.textContent = game.getScore();\r\n}\r\n","'use strict';\r\n\r\nclass Game {\r\n  static STATUS = {\r\n    idle: 'idle',\r\n    playing: 'playing',\r\n    win: 'win',\r\n    lose: 'lose',\r\n  };\r\n\r\n  constructor(\r\n    initialState = [\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ],\r\n  ) {\r\n    this.status = Game.STATUS.idle;\r\n    this.score = 0;\r\n    this.initialState = initialState;\r\n    this.state = initialState.map((row) => [...row]);\r\n  }\r\n\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  getStatus() {\r\n    return this.status;\r\n  }\r\n\r\n  moveLeft() {\r\n    if (this.getStatus() !== Game.STATUS.playing) {\r\n      return;\r\n    }\r\n\r\n    let canMove = false;\r\n    const newState = this.state.map((row) => {\r\n      const filteredRow = row.filter((cell) => cell !== 0);\r\n      const newRow = [];\r\n\r\n      for (let i = 0; i < filteredRow.length; i++) {\r\n        if (filteredRow[i] === filteredRow[i + 1]) {\r\n          const mergedValue = filteredRow[i] * 2;\r\n\r\n          newRow.push(mergedValue);\r\n          this.score += mergedValue;\r\n          i++;\r\n          canMove = true;\r\n        } else {\r\n          newRow.push(filteredRow[i]);\r\n        }\r\n      }\r\n\r\n      while (newRow.length < row.length) {\r\n        newRow.push(0);\r\n      }\r\n\r\n      if (!canMove && !row.every((cell, index) => cell === newRow[index])) {\r\n        canMove = true;\r\n      }\r\n\r\n      return newRow;\r\n    });\r\n\r\n    if (canMove) {\r\n      this.state = newState;\r\n      this.addCell();\r\n      this.setState();\r\n      this.checkStatus();\r\n    }\r\n\r\n    return canMove;\r\n  }\r\n\r\n  moveRight() {\r\n    if (this.getStatus() !== Game.STATUS.playing) {\r\n      return;\r\n    }\r\n\r\n    let canMove = false;\r\n    const newState = this.state.map((row) => {\r\n      const filteredRow = row.filter((cell) => cell !== 0);\r\n      const newRow = [];\r\n\r\n      for (let i = filteredRow.length - 1; i >= 0; i--) {\r\n        if (filteredRow[i] === filteredRow[i - 1]) {\r\n          const mergedValue = filteredRow[i] * 2;\r\n\r\n          newRow.unshift(mergedValue);\r\n          this.score += mergedValue;\r\n          i--;\r\n          canMove = true;\r\n        } else {\r\n          newRow.unshift(filteredRow[i]);\r\n        }\r\n      }\r\n\r\n      while (newRow.length < row.length) {\r\n        newRow.unshift(0);\r\n      }\r\n\r\n      if (!canMove && !row.every((cell, index) => cell === newRow[index])) {\r\n        canMove = true;\r\n      }\r\n\r\n      return newRow;\r\n    });\r\n\r\n    if (canMove) {\r\n      this.state = newState;\r\n      this.addCell();\r\n      this.setState();\r\n      this.checkStatus();\r\n    }\r\n\r\n    return canMove;\r\n  }\r\n\r\n  moveUp() {\r\n    if (this.getStatus() !== Game.STATUS.playing) {\r\n      return;\r\n    }\r\n\r\n    let canMove = false;\r\n    const newState = this.state.map((row) => [...row]);\r\n\r\n    for (let c = 0; c < this.state[0].length; c++) {\r\n      const filteredColumn = [];\r\n\r\n      for (let r = 0; r < this.state.length; r++) {\r\n        if (this.state[r][c] !== 0) {\r\n          filteredColumn.push(this.state[r][c]);\r\n        }\r\n      }\r\n\r\n      const newColumn = [];\r\n\r\n      for (let i = 0; i < filteredColumn.length; i++) {\r\n        if (filteredColumn[i] === filteredColumn[i + 1]) {\r\n          const mergedValue = filteredColumn[i] * 2;\r\n\r\n          newColumn.push(mergedValue);\r\n          this.score += mergedValue;\r\n          i++;\r\n          canMove = true;\r\n        } else {\r\n          newColumn.push(filteredColumn[i]);\r\n        }\r\n      }\r\n\r\n      while (newColumn.length < this.state.length) {\r\n        newColumn.push(0);\r\n      }\r\n\r\n      for (let r = 0; r < this.state.length; r++) {\r\n        if (newState[r][c] !== newColumn[r]) {\r\n          newState[r][c] = newColumn[r];\r\n          canMove = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (canMove) {\r\n      this.state = newState;\r\n      this.addCell();\r\n      this.setState();\r\n      this.checkStatus();\r\n    }\r\n\r\n    return canMove;\r\n  }\r\n\r\n  moveDown() {\r\n    if (this.getStatus() !== Game.STATUS.playing) {\r\n      return;\r\n    }\r\n\r\n    let canMove = false;\r\n    const newState = this.state.map((row) => [...row]);\r\n\r\n    for (let c = 0; c < this.state[0].length; c++) {\r\n      const filteredColumn = [];\r\n\r\n      for (let r = this.state.length - 1; r >= 0; r--) {\r\n        if (this.state[r][c] !== 0) {\r\n          filteredColumn.push(this.state[r][c]);\r\n        }\r\n      }\r\n\r\n      const newColumn = [];\r\n\r\n      for (let i = 0; i < filteredColumn.length; i++) {\r\n        if (filteredColumn[i] === filteredColumn[i + 1]) {\r\n          const mergedValue = filteredColumn[i] * 2;\r\n\r\n          newColumn.unshift(mergedValue);\r\n          this.score += mergedValue;\r\n          i++;\r\n          canMove = true;\r\n        } else {\r\n          newColumn.unshift(filteredColumn[i]);\r\n        }\r\n      }\r\n\r\n      while (newColumn.length < this.state.length) {\r\n        newColumn.unshift(0);\r\n      }\r\n\r\n      for (let r = 0; r < this.state.length; r++) {\r\n        if (newState[r][c] !== newColumn[r]) {\r\n          newState[r][c] = newColumn[r];\r\n          canMove = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (canMove) {\r\n      this.state = newState;\r\n      this.addCell();\r\n      this.setState();\r\n      this.checkStatus();\r\n    }\r\n\r\n    return canMove;\r\n  }\r\n\r\n  start() {\r\n    this.status = Game.STATUS.playing;\r\n    this.state = this.initialState.map((row) => [...row]);\r\n    this.addCell();\r\n    this.addCell();\r\n    this.setState();\r\n  }\r\n\r\n  restart() {\r\n    this.score = 0;\r\n    this.status = Game.STATUS.idle;\r\n    this.state = this.initialState.map((row) => [...row]);\r\n    this.setState();\r\n  }\r\n\r\n  addCell() {\r\n    const emptyCells = [];\r\n\r\n    for (let i = 0; i < this.state.length; i++) {\r\n      for (let j = 0; j < this.state[i].length; j++) {\r\n        if (this.state[i][j] === 0) {\r\n          emptyCells.push({ r: i, c: j });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (emptyCells.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const randomIndex = this.addRandomNumber(emptyCells.length);\r\n    const { r, c } = emptyCells[randomIndex];\r\n    const newState = this.state.map((row) => [...row]);\r\n\r\n    newState[r][c] = this.getRandomCell();\r\n    this.state = newState;\r\n  }\r\n\r\n  setState() {\r\n    const cells = document.querySelectorAll('.field-cell');\r\n    const stateValues = this.state.flat();\r\n\r\n    if (cells.length === 0) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < stateValues.length; i++) {\r\n      const currentCell = cells[i];\r\n      const currentValue = stateValues[i];\r\n\r\n      if (!currentCell) {\r\n        continue;\r\n      }\r\n\r\n      currentCell.className = 'field-cell';\r\n\r\n      if (currentValue > 0) {\r\n        currentCell.textContent = currentValue;\r\n        currentCell.classList.add(`field-cell--${currentValue}`);\r\n      } else {\r\n        currentCell.textContent = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  addRandomNumber(max) {\r\n    return Math.floor(Math.random() * max);\r\n  }\r\n\r\n  getRandomCell() {\r\n    return Math.random() < 0.9 ? 2 : 4;\r\n  }\r\n\r\n  checkStatus() {\r\n    let canMove = false;\r\n    let canMerge = false;\r\n\r\n    for (let i = 0; i < this.state.length; i++) {\r\n      for (let j = 0; j < this.state[i].length; j++) {\r\n        if (this.state[i][j] === 2048) {\r\n          this.status = Game.STATUS.win;\r\n\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.state.length; i++) {\r\n      for (let j = 0; j < this.state[i].length - 1; j++) {\r\n        if (this.state[i][j] === this.state[i][j + 1]) {\r\n          canMerge = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (canMerge) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!canMerge) {\r\n      for (let i = 0; i < this.state.length - 1; i++) {\r\n        for (let j = 0; j < this.state[i].length; j++) {\r\n          if (this.state[i][j] === this.state[i + 1][j]) {\r\n            canMerge = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (canMerge) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.state.length; i++) {\r\n      for (let j = 0; j < this.state[i].length; j++) {\r\n        if (this.state[i][j] === 0) {\r\n          canMove = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (canMove) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!canMove && !canMerge) {\r\n      this.status = Game.STATUS.lose;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Game;\r\n"],"names":["$parcel$interopDefault","a","__esModule","default","$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","STATUS","idle","playing","win","lose","constructor","initialState","status","score","state","map","row","getState","getScore","getStatus","moveLeft","canMove","newState","filteredRow","filter","cell","newRow","i","length","mergedValue","push","every","index","addCell","setState","checkStatus","moveRight","unshift","moveUp","c","filteredColumn","r","newColumn","moveDown","start","restart","emptyCells","j","randomIndex","addRandomNumber","getRandomCell","cells","document","querySelectorAll","stateValues","flat","currentCell","currentValue","className","textContent","classList","add","max","Math","floor","random","canMerge","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startButton","querySelector","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$getScore","addEventListener","contains","innerHTML","remove","e","key"],"version":3,"file":"index.e6773965.js.map"}